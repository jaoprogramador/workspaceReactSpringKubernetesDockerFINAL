# Nombre del workflow (aparece en la pestaña de Actions en GitHub)
name: Build

# Define cuándo se ejecuta el workflow: en push o pull request sobre la rama main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:  # Nombre interno del job (puedes tener varios jobs si necesitas)
    name: Build springKubernetes  # Nombre visible del job
    runs-on: ubuntu-latest  # Elige un runner (máquina virtual) con Ubuntu

    steps:  # Pasos que se ejecutan uno a uno dentro del job

      # Paso 1: Clona el código del repositorio
      - uses: actions/checkout@v4

      # Paso 2: Configura Java 21 usando Temurin (una distribución de OpenJDK)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'  # Habilita cache de dependencias Maven para acelerar builds

      # Paso 3: Da permisos de ejecución al wrapper de Maven (mvnw)
      - name: Grant execute permission for Maven wrapper
        run: chmod +x ./mvnw

      # Paso 4: Compila el proyecto sin correr los tests
      - name: Build with Maven
        run: ./mvnw -ntp package -DskipTests

      # Paso 5: Inicia sesión en Docker Hub usando los secretos configurados en GitHub
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Paso 6: Si estamos en la rama main, construye y sube la imagen Docker
      - name: Build and Publish Docker Image
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          ./mvnw clean package jib:dockerBuild -DskipTests  # Construye imagen Docker con Jib
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  # Repite login (opcional si no ha expirado)
          docker push ${{ secrets.DOCKER_USERNAME }}/26bookmarker-api:latest  # Sube la imagen al repositorio Docker Hub
